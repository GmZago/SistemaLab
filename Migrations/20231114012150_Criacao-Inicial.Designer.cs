// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SistemaExame.Models;

#nullable disable

namespace SistemaExame.Migrations
{
    [DbContext(typeof(Contexto))]
    [Migration("20231114012150_Criacao-Inicial")]
    partial class CriacaoInicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SistemaExame.Models.Cargo", b =>
                {
                    b.Property<int>("CargoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CargoId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CargoId"));

                    b.Property<string>("CargoNome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CargoNome");

                    b.HasKey("CargoId");

                    b.ToTable("Cargo");
                });

            modelBuilder.Entity("SistemaExame.Models.Cidade", b =>
                {
                    b.Property<int>("CidadeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CidadeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CidadeId"));

                    b.Property<string>("CidadeNome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CidadeNome");

                    b.Property<int>("PaisId")
                        .HasColumnType("int");

                    b.HasKey("CidadeId");

                    b.HasIndex("PaisId");

                    b.ToTable("Cidade");
                });

            modelBuilder.Entity("SistemaExame.Models.Exame", b =>
                {
                    b.Property<int>("ExameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExameId"));

                    b.Property<string>("ExameMaterial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExameMaterial");

                    b.Property<string>("ExameNome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExameNome");

                    b.Property<string>("ExameObservacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExameObservacao");

                    b.HasKey("ExameId");

                    b.ToTable("Exame");
                });

            modelBuilder.Entity("SistemaExame.Models.Paciente", b =>
                {
                    b.Property<int>("PacienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PacienteId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PacienteId"));

                    b.Property<int>("CidadeId")
                        .HasColumnType("int");

                    b.Property<string>("PacienteAlergia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PacienteAlergia");

                    b.Property<double>("PacienteAltura")
                        .HasColumnType("float")
                        .HasColumnName("PacienteAltura");

                    b.Property<string>("PacienteCpf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PacienteCpf");

                    b.Property<string>("PacienteEndereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PacienteEndereco");

                    b.Property<string>("PacienteIdade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PacienteIdade");

                    b.Property<string>("PacienteNome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PacienteNome");

                    b.Property<string>("PacienteNomeMae")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PacienteNomeMae");

                    b.Property<double>("PacientePeso")
                        .HasColumnType("float")
                        .HasColumnName("PacientePeso");

                    b.Property<string>("PacienteSexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PacienteSexo");

                    b.Property<string>("PacienteTelefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PacienteTelefone");

                    b.Property<string>("PacienteTipoSangue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PacienteTipoSangue");

                    b.HasKey("PacienteId");

                    b.HasIndex("CidadeId");

                    b.ToTable("Paciente");
                });

            modelBuilder.Entity("SistemaExame.Models.Pais", b =>
                {
                    b.Property<int>("PaisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaisId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaisId"));

                    b.Property<string>("PaisNome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PaisNome");

                    b.HasKey("PaisId");

                    b.ToTable("Pais");
                });

            modelBuilder.Entity("SistemaExame.Models.Profissional", b =>
                {
                    b.Property<int>("ProfissionalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProfissionalId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfissionalId"));

                    b.Property<int>("CargoId")
                        .HasColumnType("int");

                    b.Property<string>("ProfissionalNome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ProfissionalNome");

                    b.HasKey("ProfissionalId");

                    b.HasIndex("CargoId");

                    b.ToTable("Profissional");
                });

            modelBuilder.Entity("SistemaExame.Models.Resultado", b =>
                {
                    b.Property<int>("ResultadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ResultadoId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultadoId"));

                    b.Property<DateTime>("DataRealizacao")
                        .HasColumnType("datetime2")
                        .HasColumnName("DataRealizacao");

                    b.Property<int>("ExameId")
                        .HasColumnType("int");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int>("ProfissionalId")
                        .HasColumnType("int");

                    b.Property<string>("ResultadoExame")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ResultadoExame");

                    b.Property<string>("ResultadoObservacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ResultadoObservacao");

                    b.HasKey("ResultadoId");

                    b.HasIndex("ExameId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("ProfissionalId");

                    b.ToTable("Resultado");
                });

            modelBuilder.Entity("SistemaExame.Models.Cidade", b =>
                {
                    b.HasOne("SistemaExame.Models.Pais", "Pais")
                        .WithMany()
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("SistemaExame.Models.Paciente", b =>
                {
                    b.HasOne("SistemaExame.Models.Cidade", "Cidade")
                        .WithMany()
                        .HasForeignKey("CidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cidade");
                });

            modelBuilder.Entity("SistemaExame.Models.Profissional", b =>
                {
                    b.HasOne("SistemaExame.Models.Cargo", "Cargo")
                        .WithMany()
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargo");
                });

            modelBuilder.Entity("SistemaExame.Models.Resultado", b =>
                {
                    b.HasOne("SistemaExame.Models.Exame", "Exame")
                        .WithMany()
                        .HasForeignKey("ExameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaExame.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaExame.Models.Profissional", "Profissional")
                        .WithMany()
                        .HasForeignKey("ProfissionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exame");

                    b.Navigation("Paciente");

                    b.Navigation("Profissional");
                });
#pragma warning restore 612, 618
        }
    }
}
